// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	GunMessage
	AddDelegationMessage
	AddDelegationRoleAndKeysMessage
	AddDelegationPathsMessage
	RemoveDelegationKeysAndPathsMessage
	RemoveDelegationRoleMessage
	RemoveDelegationPathsMessage
	RemoveDelegationKeysMessage
	RoleNameMessage
	RotateKeyMessage
	InitMessage
	RoleNameList
	RoleNameListMessage
	RoleNameListResponse
	TargetNameMessage
	Target
	TargetWithRole
	TargetWithRoleResponse
	TargetWithRoleNameList
	TargetWithRoleNameListResponse
	TargetByNameAction
	Signature
	PublicKey
	PublicKeyResponse
	DelegationRole
	TargetSigned
	TargetSignedList
	TargetSignedListResponse
	BasicResponse
	Change
	ChangeList
	ChangeListResponse
	RootRole
	Role
	RoleList
	RoleListResponse
	RoleWithSignatures
	RoleWithSignaturesList
	RoleWithSignaturesListResponse
	CryptoServiceMessage
	CryptoServiceCreateMessage
	Signer
	PrivateKey
	CryptoServiceAddKeyMessage
	PrivateKeyResponse
	KeyIDMessage
	KeyIDsListResponse
	CryptoServicePrivateKeySignMessage
	SignatureResponse
	SigningKeyIDsToRolesResponse
	VersionMessage
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GunMessage struct {
	Gun string `protobuf:"bytes,1,opt,name=gun" json:"gun,omitempty"`
}

func (m *GunMessage) Reset()                    { *m = GunMessage{} }
func (m *GunMessage) String() string            { return proto.CompactTextString(m) }
func (*GunMessage) ProtoMessage()               {}
func (*GunMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GunMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type AddDelegationMessage struct {
	Name           string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DelegationKeys []*PublicKey `protobuf:"bytes,2,rep,name=delegationKeys" json:"delegationKeys,omitempty"`
	Paths          []string     `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
	Gun            string       `protobuf:"bytes,4,opt,name=gun" json:"gun,omitempty"`
}

func (m *AddDelegationMessage) Reset()                    { *m = AddDelegationMessage{} }
func (m *AddDelegationMessage) String() string            { return proto.CompactTextString(m) }
func (*AddDelegationMessage) ProtoMessage()               {}
func (*AddDelegationMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddDelegationMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddDelegationMessage) GetDelegationKeys() []*PublicKey {
	if m != nil {
		return m.DelegationKeys
	}
	return nil
}

func (m *AddDelegationMessage) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *AddDelegationMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type AddDelegationRoleAndKeysMessage struct {
	Name           string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DelegationKeys []*PublicKey `protobuf:"bytes,2,rep,name=delegationKeys" json:"delegationKeys,omitempty"`
	Gun            string       `protobuf:"bytes,3,opt,name=gun" json:"gun,omitempty"`
}

func (m *AddDelegationRoleAndKeysMessage) Reset()                    { *m = AddDelegationRoleAndKeysMessage{} }
func (m *AddDelegationRoleAndKeysMessage) String() string            { return proto.CompactTextString(m) }
func (*AddDelegationRoleAndKeysMessage) ProtoMessage()               {}
func (*AddDelegationRoleAndKeysMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddDelegationRoleAndKeysMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddDelegationRoleAndKeysMessage) GetDelegationKeys() []*PublicKey {
	if m != nil {
		return m.DelegationKeys
	}
	return nil
}

func (m *AddDelegationRoleAndKeysMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type AddDelegationPathsMessage struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Paths []string `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	Gun   string   `protobuf:"bytes,3,opt,name=gun" json:"gun,omitempty"`
}

func (m *AddDelegationPathsMessage) Reset()                    { *m = AddDelegationPathsMessage{} }
func (m *AddDelegationPathsMessage) String() string            { return proto.CompactTextString(m) }
func (*AddDelegationPathsMessage) ProtoMessage()               {}
func (*AddDelegationPathsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddDelegationPathsMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddDelegationPathsMessage) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *AddDelegationPathsMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RemoveDelegationKeysAndPathsMessage struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	KeyIDs []string `protobuf:"bytes,2,rep,name=keyIDs" json:"keyIDs,omitempty"`
	Paths  []string `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
	Gun    string   `protobuf:"bytes,4,opt,name=gun" json:"gun,omitempty"`
}

func (m *RemoveDelegationKeysAndPathsMessage) Reset()         { *m = RemoveDelegationKeysAndPathsMessage{} }
func (m *RemoveDelegationKeysAndPathsMessage) String() string { return proto.CompactTextString(m) }
func (*RemoveDelegationKeysAndPathsMessage) ProtoMessage()    {}
func (*RemoveDelegationKeysAndPathsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *RemoveDelegationKeysAndPathsMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveDelegationKeysAndPathsMessage) GetKeyIDs() []string {
	if m != nil {
		return m.KeyIDs
	}
	return nil
}

func (m *RemoveDelegationKeysAndPathsMessage) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *RemoveDelegationKeysAndPathsMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RemoveDelegationRoleMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Gun  string `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
}

func (m *RemoveDelegationRoleMessage) Reset()                    { *m = RemoveDelegationRoleMessage{} }
func (m *RemoveDelegationRoleMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveDelegationRoleMessage) ProtoMessage()               {}
func (*RemoveDelegationRoleMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RemoveDelegationRoleMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveDelegationRoleMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RemoveDelegationPathsMessage struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Paths []string `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	Gun   string   `protobuf:"bytes,3,opt,name=gun" json:"gun,omitempty"`
}

func (m *RemoveDelegationPathsMessage) Reset()                    { *m = RemoveDelegationPathsMessage{} }
func (m *RemoveDelegationPathsMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveDelegationPathsMessage) ProtoMessage()               {}
func (*RemoveDelegationPathsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemoveDelegationPathsMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveDelegationPathsMessage) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *RemoveDelegationPathsMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RemoveDelegationKeysMessage struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	KeyIDs []string `protobuf:"bytes,2,rep,name=keyIDs" json:"keyIDs,omitempty"`
	Gun    string   `protobuf:"bytes,3,opt,name=gun" json:"gun,omitempty"`
}

func (m *RemoveDelegationKeysMessage) Reset()                    { *m = RemoveDelegationKeysMessage{} }
func (m *RemoveDelegationKeysMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveDelegationKeysMessage) ProtoMessage()               {}
func (*RemoveDelegationKeysMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemoveDelegationKeysMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveDelegationKeysMessage) GetKeyIDs() []string {
	if m != nil {
		return m.KeyIDs
	}
	return nil
}

func (m *RemoveDelegationKeysMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RoleNameMessage struct {
	Role string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Gun  string `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
}

func (m *RoleNameMessage) Reset()                    { *m = RoleNameMessage{} }
func (m *RoleNameMessage) String() string            { return proto.CompactTextString(m) }
func (*RoleNameMessage) ProtoMessage()               {}
func (*RoleNameMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RoleNameMessage) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RoleNameMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RotateKeyMessage struct {
	Role             string   `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	ServerManagesKey bool     `protobuf:"varint,2,opt,name=serverManagesKey" json:"serverManagesKey,omitempty"`
	KeyList          []string `protobuf:"bytes,3,rep,name=keyList" json:"keyList,omitempty"`
	Gun              string   `protobuf:"bytes,4,opt,name=gun" json:"gun,omitempty"`
}

func (m *RotateKeyMessage) Reset()                    { *m = RotateKeyMessage{} }
func (m *RotateKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*RotateKeyMessage) ProtoMessage()               {}
func (*RotateKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RotateKeyMessage) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RotateKeyMessage) GetServerManagesKey() bool {
	if m != nil {
		return m.ServerManagesKey
	}
	return false
}

func (m *RotateKeyMessage) GetKeyList() []string {
	if m != nil {
		return m.KeyList
	}
	return nil
}

func (m *RotateKeyMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

// InitMessage holds a list of root key IDs and a list of roles for which
// the server automatically should manage the keys
type InitMessage struct {
	RootKeyIDs         []string      `protobuf:"bytes,1,rep,name=rootKeyIDs" json:"rootKeyIDs,omitempty"`
	ServerManagedRoles *RoleNameList `protobuf:"bytes,2,opt,name=serverManagedRoles" json:"serverManagedRoles,omitempty"`
	Gun                string        `protobuf:"bytes,3,opt,name=gun" json:"gun,omitempty"`
}

func (m *InitMessage) Reset()                    { *m = InitMessage{} }
func (m *InitMessage) String() string            { return proto.CompactTextString(m) }
func (*InitMessage) ProtoMessage()               {}
func (*InitMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InitMessage) GetRootKeyIDs() []string {
	if m != nil {
		return m.RootKeyIDs
	}
	return nil
}

func (m *InitMessage) GetServerManagedRoles() *RoleNameList {
	if m != nil {
		return m.ServerManagedRoles
	}
	return nil
}

func (m *InitMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

// RoleNameList message holds a list of TUF role names
type RoleNameList struct {
	Roles []string `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleNameList) Reset()                    { *m = RoleNameList{} }
func (m *RoleNameList) String() string            { return proto.CompactTextString(m) }
func (*RoleNameList) ProtoMessage()               {}
func (*RoleNameList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RoleNameList) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type RoleNameListMessage struct {
	Roles []string `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
	Gun   string   `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
}

func (m *RoleNameListMessage) Reset()                    { *m = RoleNameListMessage{} }
func (m *RoleNameListMessage) String() string            { return proto.CompactTextString(m) }
func (*RoleNameListMessage) ProtoMessage()               {}
func (*RoleNameListMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RoleNameListMessage) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *RoleNameListMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type RoleNameListResponse struct {
	RoleNameList *RoleNameList `protobuf:"bytes,1,opt,name=roleNameList" json:"roleNameList,omitempty"`
	Success      bool          `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message      string        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RoleNameListResponse) Reset()                    { *m = RoleNameListResponse{} }
func (m *RoleNameListResponse) String() string            { return proto.CompactTextString(m) }
func (*RoleNameListResponse) ProtoMessage()               {}
func (*RoleNameListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RoleNameListResponse) GetRoleNameList() *RoleNameList {
	if m != nil {
		return m.RoleNameList
	}
	return nil
}

func (m *RoleNameListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RoleNameListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TargetNameMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Gun  string `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
}

func (m *TargetNameMessage) Reset()                    { *m = TargetNameMessage{} }
func (m *TargetNameMessage) String() string            { return proto.CompactTextString(m) }
func (*TargetNameMessage) ProtoMessage()               {}
func (*TargetNameMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TargetNameMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TargetNameMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

// Target message describes a TUF target
type Target struct {
	Gun    string            `protobuf:"bytes,1,opt,name=gun" json:"gun,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Length int64             `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Hashes map[string][]byte `protobuf:"bytes,4,rep,name=hashes" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Target) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Target) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Target) GetHashes() map[string][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

// TargetWithRole represents a Target that exists in a particular role
type TargetWithRole struct {
	Target *Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Role   string  `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *TargetWithRole) Reset()                    { *m = TargetWithRole{} }
func (m *TargetWithRole) String() string            { return proto.CompactTextString(m) }
func (*TargetWithRole) ProtoMessage()               {}
func (*TargetWithRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TargetWithRole) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TargetWithRole) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type TargetWithRoleResponse struct {
	TargetWithRole *TargetWithRole `protobuf:"bytes,1,opt,name=targetWithRole" json:"targetWithRole,omitempty"`
	Success        bool            `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message        string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TargetWithRoleResponse) Reset()                    { *m = TargetWithRoleResponse{} }
func (m *TargetWithRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*TargetWithRoleResponse) ProtoMessage()               {}
func (*TargetWithRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TargetWithRoleResponse) GetTargetWithRole() *TargetWithRole {
	if m != nil {
		return m.TargetWithRole
	}
	return nil
}

func (m *TargetWithRoleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TargetWithRoleResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TargetWithRoleNameList struct {
	Targets []*TargetWithRole `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
}

func (m *TargetWithRoleNameList) Reset()                    { *m = TargetWithRoleNameList{} }
func (m *TargetWithRoleNameList) String() string            { return proto.CompactTextString(m) }
func (*TargetWithRoleNameList) ProtoMessage()               {}
func (*TargetWithRoleNameList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TargetWithRoleNameList) GetTargets() []*TargetWithRole {
	if m != nil {
		return m.Targets
	}
	return nil
}

type TargetWithRoleNameListResponse struct {
	TargetWithRoleNameList *TargetWithRoleNameList `protobuf:"bytes,1,opt,name=targetWithRoleNameList" json:"targetWithRoleNameList,omitempty"`
	Success                bool                    `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *TargetWithRoleNameListResponse) Reset()                    { *m = TargetWithRoleNameListResponse{} }
func (m *TargetWithRoleNameListResponse) String() string            { return proto.CompactTextString(m) }
func (*TargetWithRoleNameListResponse) ProtoMessage()               {}
func (*TargetWithRoleNameListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TargetWithRoleNameListResponse) GetTargetWithRoleNameList() *TargetWithRoleNameList {
	if m != nil {
		return m.TargetWithRoleNameList
	}
	return nil
}

func (m *TargetWithRoleNameListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type TargetByNameAction struct {
	Name  string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Roles *RoleNameList `protobuf:"bytes,2,opt,name=roles" json:"roles,omitempty"`
	Gun   string        `protobuf:"bytes,3,opt,name=gun" json:"gun,omitempty"`
}

func (m *TargetByNameAction) Reset()                    { *m = TargetByNameAction{} }
func (m *TargetByNameAction) String() string            { return proto.CompactTextString(m) }
func (*TargetByNameAction) ProtoMessage()               {}
func (*TargetByNameAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TargetByNameAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TargetByNameAction) GetRoles() *RoleNameList {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *TargetByNameAction) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type Signature struct {
	KeyID     string `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Method    string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	IsValid   bool   `protobuf:"varint,4,opt,name=isValid" json:"isValid,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Signature) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Signature) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type PublicKey struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
	Public    []byte `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PublicKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublicKey) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *PublicKey) GetPublic() []byte {
	if m != nil {
		return m.Public
	}
	return nil
}

type PublicKeyResponse struct {
	Pubkey  *PublicKey `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	Success bool       `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *PublicKeyResponse) Reset()                    { *m = PublicKeyResponse{} }
func (m *PublicKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyResponse) ProtoMessage()               {}
func (*PublicKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PublicKeyResponse) GetPubkey() *PublicKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *PublicKeyResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelegationRole struct {
	Keys      map[string]*PublicKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name      string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Threshold int32                 `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
	Paths     []string              `protobuf:"bytes,4,rep,name=paths" json:"paths,omitempty"`
}

func (m *DelegationRole) Reset()                    { *m = DelegationRole{} }
func (m *DelegationRole) String() string            { return proto.CompactTextString(m) }
func (*DelegationRole) ProtoMessage()               {}
func (*DelegationRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DelegationRole) GetKeys() map[string]*PublicKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *DelegationRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DelegationRole) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DelegationRole) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TargetSigned struct {
	Role       *DelegationRole `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Target     *Target         `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Signatures []*Signature    `protobuf:"bytes,3,rep,name=signatures" json:"signatures,omitempty"`
}

func (m *TargetSigned) Reset()                    { *m = TargetSigned{} }
func (m *TargetSigned) String() string            { return proto.CompactTextString(m) }
func (*TargetSigned) ProtoMessage()               {}
func (*TargetSigned) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *TargetSigned) GetRole() *DelegationRole {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *TargetSigned) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TargetSigned) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type TargetSignedList struct {
	Targets []*TargetSigned `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
}

func (m *TargetSignedList) Reset()                    { *m = TargetSignedList{} }
func (m *TargetSignedList) String() string            { return proto.CompactTextString(m) }
func (*TargetSignedList) ProtoMessage()               {}
func (*TargetSignedList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *TargetSignedList) GetTargets() []*TargetSigned {
	if m != nil {
		return m.Targets
	}
	return nil
}

type TargetSignedListResponse struct {
	TargetSignedList *TargetSignedList `protobuf:"bytes,1,opt,name=targetSignedList" json:"targetSignedList,omitempty"`
	Success          bool              `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message          string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TargetSignedListResponse) Reset()                    { *m = TargetSignedListResponse{} }
func (m *TargetSignedListResponse) String() string            { return proto.CompactTextString(m) }
func (*TargetSignedListResponse) ProtoMessage()               {}
func (*TargetSignedListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *TargetSignedListResponse) GetTargetSignedList() *TargetSignedList {
	if m != nil {
		return m.TargetSignedList
	}
	return nil
}

func (m *TargetSignedListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TargetSignedListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// BasicResponse describes a response with a true/false success indicator,
// and if false, an error type and message. See the errors.go file in this
// package for the possible errors and a translation function between the
// BasicResponse object and a concrete error type.
type BasicResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *BasicResponse) Reset()                    { *m = BasicResponse{} }
func (m *BasicResponse) String() string            { return proto.CompactTextString(m) }
func (*BasicResponse) ProtoMessage()               {}
func (*BasicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BasicResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BasicResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Change describes a repository's change
type Change struct {
	Action  string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Path    string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Change) Reset()                    { *m = Change{} }
func (m *Change) String() string            { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()               {}
func (*Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Change) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Change) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Change) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Change) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Change) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// ChangeList describes a list of a repository's changes
type ChangeList struct {
	Changes []*Change `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
}

func (m *ChangeList) Reset()                    { *m = ChangeList{} }
func (m *ChangeList) String() string            { return proto.CompactTextString(m) }
func (*ChangeList) ProtoMessage()               {}
func (*ChangeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ChangeList) GetChanges() []*Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ChangeListResponse struct {
	Changelist *ChangeList `protobuf:"bytes,1,opt,name=changelist" json:"changelist,omitempty"`
	Success    bool        `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message    string      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ChangeListResponse) Reset()                    { *m = ChangeListResponse{} }
func (m *ChangeListResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangeListResponse) ProtoMessage()               {}
func (*ChangeListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ChangeListResponse) GetChangelist() *ChangeList {
	if m != nil {
		return m.Changelist
	}
	return nil
}

func (m *ChangeListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ChangeListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RootRole struct {
	KeyIDs    []string `protobuf:"bytes,1,rep,name=keyIDs" json:"keyIDs,omitempty"`
	Threshold int32    `protobuf:"varint,2,opt,name=threshold" json:"threshold,omitempty"`
}

func (m *RootRole) Reset()                    { *m = RootRole{} }
func (m *RootRole) String() string            { return proto.CompactTextString(m) }
func (*RootRole) ProtoMessage()               {}
func (*RootRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RootRole) GetKeyIDs() []string {
	if m != nil {
		return m.KeyIDs
	}
	return nil
}

func (m *RootRole) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

type Role struct {
	RootRole *RootRole `protobuf:"bytes,1,opt,name=rootRole" json:"rootRole,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Paths    []string  `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Role) GetRootRole() *RootRole {
	if m != nil {
		return m.RootRole
	}
	return nil
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type RoleList struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *RoleList) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type RoleListResponse struct {
	RoleList *RoleList `protobuf:"bytes,1,opt,name=roleList" json:"roleList,omitempty"`
	Success  bool      `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message  string    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RoleListResponse) Reset()                    { *m = RoleListResponse{} }
func (m *RoleListResponse) String() string            { return proto.CompactTextString(m) }
func (*RoleListResponse) ProtoMessage()               {}
func (*RoleListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RoleListResponse) GetRoleList() *RoleList {
	if m != nil {
		return m.RoleList
	}
	return nil
}

func (m *RoleListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RoleListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RoleWithSignatures struct {
	Signatures []*Signature `protobuf:"bytes,1,rep,name=signatures" json:"signatures,omitempty"`
	Role       *Role        `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *RoleWithSignatures) Reset()                    { *m = RoleWithSignatures{} }
func (m *RoleWithSignatures) String() string            { return proto.CompactTextString(m) }
func (*RoleWithSignatures) ProtoMessage()               {}
func (*RoleWithSignatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *RoleWithSignatures) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *RoleWithSignatures) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type RoleWithSignaturesList struct {
	RoleWithSignatures []*RoleWithSignatures `protobuf:"bytes,1,rep,name=roleWithSignatures" json:"roleWithSignatures,omitempty"`
}

func (m *RoleWithSignaturesList) Reset()                    { *m = RoleWithSignaturesList{} }
func (m *RoleWithSignaturesList) String() string            { return proto.CompactTextString(m) }
func (*RoleWithSignaturesList) ProtoMessage()               {}
func (*RoleWithSignaturesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *RoleWithSignaturesList) GetRoleWithSignatures() []*RoleWithSignatures {
	if m != nil {
		return m.RoleWithSignatures
	}
	return nil
}

type RoleWithSignaturesListResponse struct {
	RoleWithSignaturesList *RoleWithSignaturesList `protobuf:"bytes,1,opt,name=roleWithSignaturesList" json:"roleWithSignaturesList,omitempty"`
	Success                bool                    `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message                string                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RoleWithSignaturesListResponse) Reset()                    { *m = RoleWithSignaturesListResponse{} }
func (m *RoleWithSignaturesListResponse) String() string            { return proto.CompactTextString(m) }
func (*RoleWithSignaturesListResponse) ProtoMessage()               {}
func (*RoleWithSignaturesListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *RoleWithSignaturesListResponse) GetRoleWithSignaturesList() *RoleWithSignaturesList {
	if m != nil {
		return m.RoleWithSignaturesList
	}
	return nil
}

func (m *RoleWithSignaturesListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RoleWithSignaturesListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// FIXME: unimplemented
type CryptoServiceMessage struct {
}

func (m *CryptoServiceMessage) Reset()                    { *m = CryptoServiceMessage{} }
func (m *CryptoServiceMessage) String() string            { return proto.CompactTextString(m) }
func (*CryptoServiceMessage) ProtoMessage()               {}
func (*CryptoServiceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type CryptoServiceCreateMessage struct {
	RoleName  string `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Gun       string `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
	Algorithm string `protobuf:"bytes,3,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *CryptoServiceCreateMessage) Reset()                    { *m = CryptoServiceCreateMessage{} }
func (m *CryptoServiceCreateMessage) String() string            { return proto.CompactTextString(m) }
func (*CryptoServiceCreateMessage) ProtoMessage()               {}
func (*CryptoServiceCreateMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CryptoServiceCreateMessage) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *CryptoServiceCreateMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func (m *CryptoServiceCreateMessage) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

type Signer struct {
	Pubkey *PublicKey `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
}

func (m *Signer) Reset()                    { *m = Signer{} }
func (m *Signer) String() string            { return proto.CompactTextString(m) }
func (*Signer) ProtoMessage()               {}
func (*Signer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Signer) GetPubkey() *PublicKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type PrivateKey struct {
	Pubkey       *PublicKey `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	Privkey      []byte     `protobuf:"bytes,2,opt,name=privkey,proto3" json:"privkey,omitempty"`
	CryptoSigner *Signer    `protobuf:"bytes,3,opt,name=cryptoSigner" json:"cryptoSigner,omitempty"`
	SigAlgorithm string     `protobuf:"bytes,4,opt,name=sigAlgorithm" json:"sigAlgorithm,omitempty"`
}

func (m *PrivateKey) Reset()                    { *m = PrivateKey{} }
func (m *PrivateKey) String() string            { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()               {}
func (*PrivateKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *PrivateKey) GetPubkey() *PublicKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *PrivateKey) GetPrivkey() []byte {
	if m != nil {
		return m.Privkey
	}
	return nil
}

func (m *PrivateKey) GetCryptoSigner() *Signer {
	if m != nil {
		return m.CryptoSigner
	}
	return nil
}

func (m *PrivateKey) GetSigAlgorithm() string {
	if m != nil {
		return m.SigAlgorithm
	}
	return ""
}

type CryptoServiceAddKeyMessage struct {
	RoleName string      `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Gun      string      `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
	Key      *PrivateKey `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoServiceAddKeyMessage) Reset()                    { *m = CryptoServiceAddKeyMessage{} }
func (m *CryptoServiceAddKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*CryptoServiceAddKeyMessage) ProtoMessage()               {}
func (*CryptoServiceAddKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CryptoServiceAddKeyMessage) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *CryptoServiceAddKeyMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func (m *CryptoServiceAddKeyMessage) GetKey() *PrivateKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type PrivateKeyResponse struct {
	Role    string      `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Gun     string      `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
	Privkey *PrivateKey `protobuf:"bytes,3,opt,name=privkey" json:"privkey,omitempty"`
	Success bool        `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	Message string      `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *PrivateKeyResponse) Reset()                    { *m = PrivateKeyResponse{} }
func (m *PrivateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*PrivateKeyResponse) ProtoMessage()               {}
func (*PrivateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *PrivateKeyResponse) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *PrivateKeyResponse) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func (m *PrivateKeyResponse) GetPrivkey() *PrivateKey {
	if m != nil {
		return m.Privkey
	}
	return nil
}

func (m *PrivateKeyResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PrivateKeyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type KeyIDMessage struct {
	KeyID string `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Gun   string `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
}

func (m *KeyIDMessage) Reset()                    { *m = KeyIDMessage{} }
func (m *KeyIDMessage) String() string            { return proto.CompactTextString(m) }
func (*KeyIDMessage) ProtoMessage()               {}
func (*KeyIDMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *KeyIDMessage) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *KeyIDMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type KeyIDsListResponse struct {
	KeyIDs  []string `protobuf:"bytes,1,rep,name=keyIDs" json:"keyIDs,omitempty"`
	Success bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *KeyIDsListResponse) Reset()                    { *m = KeyIDsListResponse{} }
func (m *KeyIDsListResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyIDsListResponse) ProtoMessage()               {}
func (*KeyIDsListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *KeyIDsListResponse) GetKeyIDs() []string {
	if m != nil {
		return m.KeyIDs
	}
	return nil
}

func (m *KeyIDsListResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *KeyIDsListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CryptoServicePrivateKeySignMessage struct {
	Pubkey  *PublicKey `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	Digest  []byte     `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	Privkey []byte     `protobuf:"bytes,3,opt,name=privkey,proto3" json:"privkey,omitempty"`
	Gun     string     `protobuf:"bytes,4,opt,name=gun" json:"gun,omitempty"`
}

func (m *CryptoServicePrivateKeySignMessage) Reset()         { *m = CryptoServicePrivateKeySignMessage{} }
func (m *CryptoServicePrivateKeySignMessage) String() string { return proto.CompactTextString(m) }
func (*CryptoServicePrivateKeySignMessage) ProtoMessage()    {}
func (*CryptoServicePrivateKeySignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{47}
}

func (m *CryptoServicePrivateKeySignMessage) GetPubkey() *PublicKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *CryptoServicePrivateKeySignMessage) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *CryptoServicePrivateKeySignMessage) GetPrivkey() []byte {
	if m != nil {
		return m.Privkey
	}
	return nil
}

func (m *CryptoServicePrivateKeySignMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

type SignatureResponse struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Success   bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SignatureResponse) Reset()                    { *m = SignatureResponse{} }
func (m *SignatureResponse) String() string            { return proto.CompactTextString(m) }
func (*SignatureResponse) ProtoMessage()               {}
func (*SignatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *SignatureResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignatureResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SignatureResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SigningKeyIDsToRolesResponse struct {
	KeyIDs  map[string]string `protobuf:"bytes,1,rep,name=keyIDs" json:"keyIDs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Success bool              `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SigningKeyIDsToRolesResponse) Reset()                    { *m = SigningKeyIDsToRolesResponse{} }
func (m *SigningKeyIDsToRolesResponse) String() string            { return proto.CompactTextString(m) }
func (*SigningKeyIDsToRolesResponse) ProtoMessage()               {}
func (*SigningKeyIDsToRolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *SigningKeyIDsToRolesResponse) GetKeyIDs() map[string]string {
	if m != nil {
		return m.KeyIDs
	}
	return nil
}

func (m *SigningKeyIDsToRolesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SigningKeyIDsToRolesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type VersionMessage struct {
	Version int32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Gun     string `protobuf:"bytes,2,opt,name=gun" json:"gun,omitempty"`
}

func (m *VersionMessage) Reset()                    { *m = VersionMessage{} }
func (m *VersionMessage) String() string            { return proto.CompactTextString(m) }
func (*VersionMessage) ProtoMessage()               {}
func (*VersionMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *VersionMessage) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VersionMessage) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func init() {
	proto.RegisterType((*GunMessage)(nil), "api.GunMessage")
	proto.RegisterType((*AddDelegationMessage)(nil), "api.AddDelegationMessage")
	proto.RegisterType((*AddDelegationRoleAndKeysMessage)(nil), "api.AddDelegationRoleAndKeysMessage")
	proto.RegisterType((*AddDelegationPathsMessage)(nil), "api.AddDelegationPathsMessage")
	proto.RegisterType((*RemoveDelegationKeysAndPathsMessage)(nil), "api.RemoveDelegationKeysAndPathsMessage")
	proto.RegisterType((*RemoveDelegationRoleMessage)(nil), "api.RemoveDelegationRoleMessage")
	proto.RegisterType((*RemoveDelegationPathsMessage)(nil), "api.RemoveDelegationPathsMessage")
	proto.RegisterType((*RemoveDelegationKeysMessage)(nil), "api.RemoveDelegationKeysMessage")
	proto.RegisterType((*RoleNameMessage)(nil), "api.RoleNameMessage")
	proto.RegisterType((*RotateKeyMessage)(nil), "api.RotateKeyMessage")
	proto.RegisterType((*InitMessage)(nil), "api.InitMessage")
	proto.RegisterType((*RoleNameList)(nil), "api.RoleNameList")
	proto.RegisterType((*RoleNameListMessage)(nil), "api.RoleNameListMessage")
	proto.RegisterType((*RoleNameListResponse)(nil), "api.RoleNameListResponse")
	proto.RegisterType((*TargetNameMessage)(nil), "api.TargetNameMessage")
	proto.RegisterType((*Target)(nil), "api.Target")
	proto.RegisterType((*TargetWithRole)(nil), "api.TargetWithRole")
	proto.RegisterType((*TargetWithRoleResponse)(nil), "api.TargetWithRoleResponse")
	proto.RegisterType((*TargetWithRoleNameList)(nil), "api.TargetWithRoleNameList")
	proto.RegisterType((*TargetWithRoleNameListResponse)(nil), "api.TargetWithRoleNameListResponse")
	proto.RegisterType((*TargetByNameAction)(nil), "api.TargetByNameAction")
	proto.RegisterType((*Signature)(nil), "api.Signature")
	proto.RegisterType((*PublicKey)(nil), "api.PublicKey")
	proto.RegisterType((*PublicKeyResponse)(nil), "api.PublicKeyResponse")
	proto.RegisterType((*DelegationRole)(nil), "api.DelegationRole")
	proto.RegisterType((*TargetSigned)(nil), "api.TargetSigned")
	proto.RegisterType((*TargetSignedList)(nil), "api.TargetSignedList")
	proto.RegisterType((*TargetSignedListResponse)(nil), "api.TargetSignedListResponse")
	proto.RegisterType((*BasicResponse)(nil), "api.BasicResponse")
	proto.RegisterType((*Change)(nil), "api.Change")
	proto.RegisterType((*ChangeList)(nil), "api.ChangeList")
	proto.RegisterType((*ChangeListResponse)(nil), "api.ChangeListResponse")
	proto.RegisterType((*RootRole)(nil), "api.RootRole")
	proto.RegisterType((*Role)(nil), "api.Role")
	proto.RegisterType((*RoleList)(nil), "api.RoleList")
	proto.RegisterType((*RoleListResponse)(nil), "api.RoleListResponse")
	proto.RegisterType((*RoleWithSignatures)(nil), "api.RoleWithSignatures")
	proto.RegisterType((*RoleWithSignaturesList)(nil), "api.RoleWithSignaturesList")
	proto.RegisterType((*RoleWithSignaturesListResponse)(nil), "api.RoleWithSignaturesListResponse")
	proto.RegisterType((*CryptoServiceMessage)(nil), "api.CryptoServiceMessage")
	proto.RegisterType((*CryptoServiceCreateMessage)(nil), "api.CryptoServiceCreateMessage")
	proto.RegisterType((*Signer)(nil), "api.Signer")
	proto.RegisterType((*PrivateKey)(nil), "api.PrivateKey")
	proto.RegisterType((*CryptoServiceAddKeyMessage)(nil), "api.CryptoServiceAddKeyMessage")
	proto.RegisterType((*PrivateKeyResponse)(nil), "api.PrivateKeyResponse")
	proto.RegisterType((*KeyIDMessage)(nil), "api.KeyIDMessage")
	proto.RegisterType((*KeyIDsListResponse)(nil), "api.KeyIDsListResponse")
	proto.RegisterType((*CryptoServicePrivateKeySignMessage)(nil), "api.CryptoServicePrivateKeySignMessage")
	proto.RegisterType((*SignatureResponse)(nil), "api.SignatureResponse")
	proto.RegisterType((*SigningKeyIDsToRolesResponse)(nil), "api.SigningKeyIDsToRolesResponse")
	proto.RegisterType((*VersionMessage)(nil), "api.VersionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notary service

type NotaryClient interface {
	Initialize(ctx context.Context, in *InitMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	Publish(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	// AddTarget adds a target to the TUF repository and re-signs.
	AddTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error)
	// RemoveTarget deletes a target from the TUF repository and re-signs. It only
	// uses the `name` field from the Target object, ignoring all other fields
	RemoveTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error)
	// ListTargets list the targets for the specified roles in the TUF repository
	ListTargets(ctx context.Context, in *RoleNameListMessage, opts ...grpc.CallOption) (*TargetWithRoleNameListResponse, error)
	// GetTargetByName returns a target by the given name.
	GetTargetByName(ctx context.Context, in *TargetByNameAction, opts ...grpc.CallOption) (*TargetWithRoleResponse, error)
	// GetAllTargetMetadataByName
	GetAllTargetMetadataByName(ctx context.Context, in *TargetNameMessage, opts ...grpc.CallOption) (*TargetSignedListResponse, error)
	// GetChangelist returns the list of the repository's unpublished changes
	GetChangelist(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*ChangeListResponse, error)
	ListRoles(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*RoleWithSignaturesListResponse, error)
	GetDelegationRoles(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*RoleListResponse, error)
	AddDelegation(ctx context.Context, in *AddDelegationMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	AddDelegationRoleAndKeys(ctx context.Context, in *AddDelegationRoleAndKeysMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	AddDelegationPaths(ctx context.Context, in *AddDelegationPathsMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	RemoveDelegationKeysAndPaths(ctx context.Context, in *RemoveDelegationKeysAndPathsMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	RemoveDelegationRole(ctx context.Context, in *RemoveDelegationRoleMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	RemoveDelegationPaths(ctx context.Context, in *RemoveDelegationPathsMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	RemoveDelegationKeys(ctx context.Context, in *RemoveDelegationKeysMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	ClearDelegationPaths(ctx context.Context, in *RoleNameMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	Witness(ctx context.Context, in *RoleNameListMessage, opts ...grpc.CallOption) (*RoleNameListResponse, error)
	RotateKey(ctx context.Context, in *RotateKeyMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	// CryptoService implementation
	CryptoService(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*CryptoServiceMessage, error)
	CryptoServiceCreate(ctx context.Context, in *CryptoServiceCreateMessage, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	CryptoServicePrivateKeySign(ctx context.Context, in *CryptoServicePrivateKeySignMessage, opts ...grpc.CallOption) (*SignatureResponse, error)
	CryptoServiceAddKey(ctx context.Context, in *CryptoServiceAddKeyMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	CryptoServiceGetKey(ctx context.Context, in *KeyIDMessage, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	CryptoServiceGetPrivateKey(ctx context.Context, in *KeyIDMessage, opts ...grpc.CallOption) (*PrivateKeyResponse, error)
	CryptoServiceRemoveKey(ctx context.Context, in *KeyIDMessage, opts ...grpc.CallOption) (*BasicResponse, error)
	CryptoServiceListKeys(ctx context.Context, in *RoleNameMessage, opts ...grpc.CallOption) (*KeyIDsListResponse, error)
	CryptoServiceListAllKeys(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*SigningKeyIDsToRolesResponse, error)
	SetLegacyVersions(ctx context.Context, in *VersionMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type notaryClient struct {
	cc *grpc.ClientConn
}

func NewNotaryClient(cc *grpc.ClientConn) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) Initialize(ctx context.Context, in *InitMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) Publish(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) AddTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/AddTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) ListTargets(ctx context.Context, in *RoleNameListMessage, opts ...grpc.CallOption) (*TargetWithRoleNameListResponse, error) {
	out := new(TargetWithRoleNameListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/ListTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetTargetByName(ctx context.Context, in *TargetByNameAction, opts ...grpc.CallOption) (*TargetWithRoleResponse, error) {
	out := new(TargetWithRoleResponse)
	err := grpc.Invoke(ctx, "/api.Notary/GetTargetByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetAllTargetMetadataByName(ctx context.Context, in *TargetNameMessage, opts ...grpc.CallOption) (*TargetSignedListResponse, error) {
	out := new(TargetSignedListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/GetAllTargetMetadataByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetChangelist(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*ChangeListResponse, error) {
	out := new(ChangeListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/GetChangelist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) ListRoles(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*RoleWithSignaturesListResponse, error) {
	out := new(RoleWithSignaturesListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetDelegationRoles(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*RoleListResponse, error) {
	out := new(RoleListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/GetDelegationRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) AddDelegation(ctx context.Context, in *AddDelegationMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/AddDelegation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) AddDelegationRoleAndKeys(ctx context.Context, in *AddDelegationRoleAndKeysMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/AddDelegationRoleAndKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) AddDelegationPaths(ctx context.Context, in *AddDelegationPathsMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/AddDelegationPaths", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveDelegationKeysAndPaths(ctx context.Context, in *RemoveDelegationKeysAndPathsMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveDelegationKeysAndPaths", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveDelegationRole(ctx context.Context, in *RemoveDelegationRoleMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveDelegationRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveDelegationPaths(ctx context.Context, in *RemoveDelegationPathsMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveDelegationPaths", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveDelegationKeys(ctx context.Context, in *RemoveDelegationKeysMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveDelegationKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) ClearDelegationPaths(ctx context.Context, in *RoleNameMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/ClearDelegationPaths", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) Witness(ctx context.Context, in *RoleNameListMessage, opts ...grpc.CallOption) (*RoleNameListResponse, error) {
	out := new(RoleNameListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/Witness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RotateKey(ctx context.Context, in *RotateKeyMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RotateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoService(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*CryptoServiceMessage, error) {
	out := new(CryptoServiceMessage)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceCreate(ctx context.Context, in *CryptoServiceCreateMessage, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServicePrivateKeySign(ctx context.Context, in *CryptoServicePrivateKeySignMessage, opts ...grpc.CallOption) (*SignatureResponse, error) {
	out := new(SignatureResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServicePrivateKeySign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceAddKey(ctx context.Context, in *CryptoServiceAddKeyMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceAddKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceGetKey(ctx context.Context, in *KeyIDMessage, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceGetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceGetPrivateKey(ctx context.Context, in *KeyIDMessage, opts ...grpc.CallOption) (*PrivateKeyResponse, error) {
	out := new(PrivateKeyResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceGetPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceRemoveKey(ctx context.Context, in *KeyIDMessage, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceRemoveKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceListKeys(ctx context.Context, in *RoleNameMessage, opts ...grpc.CallOption) (*KeyIDsListResponse, error) {
	out := new(KeyIDsListResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceListKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) CryptoServiceListAllKeys(ctx context.Context, in *GunMessage, opts ...grpc.CallOption) (*SigningKeyIDsToRolesResponse, error) {
	out := new(SigningKeyIDsToRolesResponse)
	err := grpc.Invoke(ctx, "/api.Notary/CryptoServiceListAllKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) SetLegacyVersions(ctx context.Context, in *VersionMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.Notary/SetLegacyVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notary service

type NotaryServer interface {
	Initialize(context.Context, *InitMessage) (*BasicResponse, error)
	Publish(context.Context, *GunMessage) (*BasicResponse, error)
	// AddTarget adds a target to the TUF repository and re-signs.
	AddTarget(context.Context, *Target) (*BasicResponse, error)
	// RemoveTarget deletes a target from the TUF repository and re-signs. It only
	// uses the `name` field from the Target object, ignoring all other fields
	RemoveTarget(context.Context, *Target) (*BasicResponse, error)
	// ListTargets list the targets for the specified roles in the TUF repository
	ListTargets(context.Context, *RoleNameListMessage) (*TargetWithRoleNameListResponse, error)
	// GetTargetByName returns a target by the given name.
	GetTargetByName(context.Context, *TargetByNameAction) (*TargetWithRoleResponse, error)
	// GetAllTargetMetadataByName
	GetAllTargetMetadataByName(context.Context, *TargetNameMessage) (*TargetSignedListResponse, error)
	// GetChangelist returns the list of the repository's unpublished changes
	GetChangelist(context.Context, *GunMessage) (*ChangeListResponse, error)
	ListRoles(context.Context, *GunMessage) (*RoleWithSignaturesListResponse, error)
	GetDelegationRoles(context.Context, *GunMessage) (*RoleListResponse, error)
	AddDelegation(context.Context, *AddDelegationMessage) (*BasicResponse, error)
	AddDelegationRoleAndKeys(context.Context, *AddDelegationRoleAndKeysMessage) (*BasicResponse, error)
	AddDelegationPaths(context.Context, *AddDelegationPathsMessage) (*BasicResponse, error)
	RemoveDelegationKeysAndPaths(context.Context, *RemoveDelegationKeysAndPathsMessage) (*BasicResponse, error)
	RemoveDelegationRole(context.Context, *RemoveDelegationRoleMessage) (*BasicResponse, error)
	RemoveDelegationPaths(context.Context, *RemoveDelegationPathsMessage) (*BasicResponse, error)
	RemoveDelegationKeys(context.Context, *RemoveDelegationKeysMessage) (*BasicResponse, error)
	ClearDelegationPaths(context.Context, *RoleNameMessage) (*BasicResponse, error)
	Witness(context.Context, *RoleNameListMessage) (*RoleNameListResponse, error)
	RotateKey(context.Context, *RotateKeyMessage) (*BasicResponse, error)
	// CryptoService implementation
	CryptoService(context.Context, *GunMessage) (*CryptoServiceMessage, error)
	CryptoServiceCreate(context.Context, *CryptoServiceCreateMessage) (*PublicKeyResponse, error)
	CryptoServicePrivateKeySign(context.Context, *CryptoServicePrivateKeySignMessage) (*SignatureResponse, error)
	CryptoServiceAddKey(context.Context, *CryptoServiceAddKeyMessage) (*BasicResponse, error)
	CryptoServiceGetKey(context.Context, *KeyIDMessage) (*PublicKeyResponse, error)
	CryptoServiceGetPrivateKey(context.Context, *KeyIDMessage) (*PrivateKeyResponse, error)
	CryptoServiceRemoveKey(context.Context, *KeyIDMessage) (*BasicResponse, error)
	CryptoServiceListKeys(context.Context, *RoleNameMessage) (*KeyIDsListResponse, error)
	CryptoServiceListAllKeys(context.Context, *GunMessage) (*SigningKeyIDsToRolesResponse, error)
	SetLegacyVersions(context.Context, *VersionMessage) (*google_protobuf.Empty, error)
}

func RegisterNotaryServer(s *grpc.Server, srv NotaryServer) {
	s.RegisterService(&_Notary_serviceDesc, srv)
}

func _Notary_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Initialize(ctx, req.(*InitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GunMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Publish(ctx, req.(*GunMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_AddTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).AddTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/AddTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).AddTarget(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveTarget(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).ListTargets(ctx, req.(*RoleNameListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetTargetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetByNameAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetTargetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetTargetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetTargetByName(ctx, req.(*TargetByNameAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetAllTargetMetadataByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetNameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetAllTargetMetadataByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetAllTargetMetadataByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetAllTargetMetadataByName(ctx, req.(*TargetNameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GunMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetChangelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetChangelist(ctx, req.(*GunMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GunMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).ListRoles(ctx, req.(*GunMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetDelegationRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GunMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetDelegationRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetDelegationRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetDelegationRoles(ctx, req.(*GunMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_AddDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDelegationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).AddDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/AddDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).AddDelegation(ctx, req.(*AddDelegationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_AddDelegationRoleAndKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDelegationRoleAndKeysMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).AddDelegationRoleAndKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/AddDelegationRoleAndKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).AddDelegationRoleAndKeys(ctx, req.(*AddDelegationRoleAndKeysMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_AddDelegationPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDelegationPathsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).AddDelegationPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/AddDelegationPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).AddDelegationPaths(ctx, req.(*AddDelegationPathsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveDelegationKeysAndPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDelegationKeysAndPathsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveDelegationKeysAndPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveDelegationKeysAndPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveDelegationKeysAndPaths(ctx, req.(*RemoveDelegationKeysAndPathsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveDelegationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDelegationRoleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveDelegationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveDelegationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveDelegationRole(ctx, req.(*RemoveDelegationRoleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveDelegationPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDelegationPathsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveDelegationPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveDelegationPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveDelegationPaths(ctx, req.(*RemoveDelegationPathsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveDelegationKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDelegationKeysMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveDelegationKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveDelegationKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveDelegationKeys(ctx, req.(*RemoveDelegationKeysMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_ClearDelegationPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).ClearDelegationPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/ClearDelegationPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).ClearDelegationPaths(ctx, req.(*RoleNameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_Witness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Witness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/Witness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Witness(ctx, req.(*RoleNameListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RotateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RotateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RotateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RotateKey(ctx, req.(*RotateKeyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GunMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoService(ctx, req.(*GunMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServiceCreateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceCreate(ctx, req.(*CryptoServiceCreateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServicePrivateKeySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePrivateKeySignMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServicePrivateKeySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServicePrivateKeySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServicePrivateKeySign(ctx, req.(*CryptoServicePrivateKeySignMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceAddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServiceAddKeyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceAddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceAddKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceAddKey(ctx, req.(*CryptoServiceAddKeyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceGetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceGetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceGetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceGetKey(ctx, req.(*KeyIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceGetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceGetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceGetPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceGetPrivateKey(ctx, req.(*KeyIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceRemoveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceRemoveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceRemoveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceRemoveKey(ctx, req.(*KeyIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceListKeys(ctx, req.(*RoleNameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_CryptoServiceListAllKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GunMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).CryptoServiceListAllKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/CryptoServiceListAllKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).CryptoServiceListAllKeys(ctx, req.(*GunMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_SetLegacyVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).SetLegacyVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/SetLegacyVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).SetLegacyVersions(ctx, req.(*VersionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _Notary_Initialize_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Notary_Publish_Handler,
		},
		{
			MethodName: "AddTarget",
			Handler:    _Notary_AddTarget_Handler,
		},
		{
			MethodName: "RemoveTarget",
			Handler:    _Notary_RemoveTarget_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _Notary_ListTargets_Handler,
		},
		{
			MethodName: "GetTargetByName",
			Handler:    _Notary_GetTargetByName_Handler,
		},
		{
			MethodName: "GetAllTargetMetadataByName",
			Handler:    _Notary_GetAllTargetMetadataByName_Handler,
		},
		{
			MethodName: "GetChangelist",
			Handler:    _Notary_GetChangelist_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Notary_ListRoles_Handler,
		},
		{
			MethodName: "GetDelegationRoles",
			Handler:    _Notary_GetDelegationRoles_Handler,
		},
		{
			MethodName: "AddDelegation",
			Handler:    _Notary_AddDelegation_Handler,
		},
		{
			MethodName: "AddDelegationRoleAndKeys",
			Handler:    _Notary_AddDelegationRoleAndKeys_Handler,
		},
		{
			MethodName: "AddDelegationPaths",
			Handler:    _Notary_AddDelegationPaths_Handler,
		},
		{
			MethodName: "RemoveDelegationKeysAndPaths",
			Handler:    _Notary_RemoveDelegationKeysAndPaths_Handler,
		},
		{
			MethodName: "RemoveDelegationRole",
			Handler:    _Notary_RemoveDelegationRole_Handler,
		},
		{
			MethodName: "RemoveDelegationPaths",
			Handler:    _Notary_RemoveDelegationPaths_Handler,
		},
		{
			MethodName: "RemoveDelegationKeys",
			Handler:    _Notary_RemoveDelegationKeys_Handler,
		},
		{
			MethodName: "ClearDelegationPaths",
			Handler:    _Notary_ClearDelegationPaths_Handler,
		},
		{
			MethodName: "Witness",
			Handler:    _Notary_Witness_Handler,
		},
		{
			MethodName: "RotateKey",
			Handler:    _Notary_RotateKey_Handler,
		},
		{
			MethodName: "CryptoService",
			Handler:    _Notary_CryptoService_Handler,
		},
		{
			MethodName: "CryptoServiceCreate",
			Handler:    _Notary_CryptoServiceCreate_Handler,
		},
		{
			MethodName: "CryptoServicePrivateKeySign",
			Handler:    _Notary_CryptoServicePrivateKeySign_Handler,
		},
		{
			MethodName: "CryptoServiceAddKey",
			Handler:    _Notary_CryptoServiceAddKey_Handler,
		},
		{
			MethodName: "CryptoServiceGetKey",
			Handler:    _Notary_CryptoServiceGetKey_Handler,
		},
		{
			MethodName: "CryptoServiceGetPrivateKey",
			Handler:    _Notary_CryptoServiceGetPrivateKey_Handler,
		},
		{
			MethodName: "CryptoServiceRemoveKey",
			Handler:    _Notary_CryptoServiceRemoveKey_Handler,
		},
		{
			MethodName: "CryptoServiceListKeys",
			Handler:    _Notary_CryptoServiceListKeys_Handler,
		},
		{
			MethodName: "CryptoServiceListAllKeys",
			Handler:    _Notary_CryptoServiceListAllKeys_Handler,
		},
		{
			MethodName: "SetLegacyVersions",
			Handler:    _Notary_SetLegacyVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x59, 0x5f, 0x73, 0xdb, 0xc6,
	0x11, 0x37, 0x48, 0x89, 0x32, 0x97, 0x94, 0x2c, 0x9d, 0x65, 0x8a, 0xa6, 0x6d, 0x59, 0x86, 0xdd,
	0xda, 0x69, 0x26, 0x54, 0xa2, 0xb4, 0x69, 0xd2, 0x34, 0xad, 0x69, 0xda, 0xc3, 0x28, 0xb2, 0x3d,
	0x2a, 0x94, 0xd8, 0x33, 0xcd, 0x4c, 0x27, 0x30, 0x71, 0x25, 0x31, 0x02, 0x01, 0x06, 0x38, 0x69,
	0x8a, 0x3e, 0xb4, 0xd3, 0xbe, 0xb5, 0xd3, 0x99, 0xb6, 0x8f, 0x7d, 0xee, 0x53, 0x5f, 0xfb, 0x59,
	0xf2, 0x4d, 0xfa, 0x05, 0x3a, 0xf7, 0x0f, 0xb8, 0x03, 0x0e, 0x94, 0xcc, 0x69, 0xdf, 0x78, 0x87,
	0xdd, 0xdf, 0xfe, 0xb9, 0xdd, 0xdb, 0xbd, 0x25, 0x34, 0xdd, 0xb9, 0xdf, 0x9f, 0xc7, 0x11, 0x89,
	0x50, 0xdd, 0x9d, 0xfb, 0xbd, 0x5b, 0x93, 0x28, 0x9a, 0x04, 0x78, 0x9f, 0x6d, 0xbd, 0x39, 0xfb,
	0xf5, 0xfe, 0xb3, 0xd9, 0x9c, 0xa4, 0x9c, 0xc2, 0xde, 0x05, 0x18, 0x9d, 0x85, 0x2f, 0x70, 0x92,
	0xb8, 0x13, 0x8c, 0x36, 0xa1, 0x3e, 0x39, 0x0b, 0xbb, 0xd6, 0x9e, 0xf5, 0xa8, 0xe9, 0xd0, 0x9f,
	0xf6, 0x9f, 0x2d, 0xd8, 0x1e, 0x78, 0xde, 0x53, 0x1c, 0xe0, 0x89, 0x4b, 0xfc, 0x28, 0x23, 0x45,
	0xb0, 0x12, 0xba, 0x33, 0x2c, 0x68, 0xd9, 0x6f, 0xf4, 0x11, 0x6c, 0x78, 0x19, 0xe1, 0x11, 0x4e,
	0x93, 0x6e, 0x6d, 0xaf, 0xfe, 0xa8, 0x75, 0xb0, 0xd1, 0xa7, 0x2a, 0x1d, 0x9f, 0xbd, 0x09, 0xfc,
	0xf1, 0x11, 0x4e, 0x9d, 0x02, 0x15, 0xda, 0x86, 0xd5, 0xb9, 0x4b, 0xa6, 0x49, 0xb7, 0xbe, 0x57,
	0x7f, 0xd4, 0x74, 0xf8, 0x42, 0x2a, 0xb3, 0x92, 0x2b, 0xf3, 0x7b, 0xb8, 0xab, 0xe9, 0xe2, 0x44,
	0x01, 0x1e, 0x84, 0x1e, 0xc5, 0xf8, 0x7f, 0xa8, 0x25, 0x14, 0xa8, 0xe7, 0x0a, 0xbc, 0x86, 0x9b,
	0x9a, 0x02, 0xc7, 0x54, 0xd1, 0x45, 0xa2, 0x33, 0xcb, 0x6a, 0x06, 0xcb, 0x14, 0xe0, 0x14, 0xee,
	0x3b, 0x78, 0x16, 0x9d, 0xe3, 0xa7, 0x9a, 0x0a, 0x83, 0xd0, 0xbb, 0x50, 0x44, 0x07, 0x1a, 0xa7,
	0x38, 0x3d, 0x7c, 0x2a, 0x65, 0x88, 0xd5, 0xa5, 0x9d, 0x3a, 0x84, 0x5b, 0x45, 0xd1, 0xd4, 0xaf,
	0x8b, 0x44, 0x0a, 0x90, 0x5a, 0x0e, 0xf2, 0x4b, 0xb8, 0x5d, 0x04, 0xf9, 0x9f, 0xf9, 0xe6, 0xeb,
	0xb2, 0x82, 0x17, 0x9d, 0x78, 0x95, 0x4f, 0xca, 0xe0, 0x3f, 0x86, 0x6b, 0xd4, 0xda, 0x97, 0xee,
	0x4c, 0xb5, 0x38, 0x8e, 0x82, 0x0c, 0x90, 0xfe, 0x36, 0x58, 0xfc, 0x3b, 0xd8, 0x74, 0x22, 0xe2,
	0x12, 0x7c, 0x84, 0xd3, 0x45, 0x9c, 0x3f, 0x80, 0xcd, 0x04, 0xc7, 0xe7, 0x38, 0x7e, 0xe1, 0x86,
	0xee, 0x04, 0x27, 0x47, 0x38, 0x65, 0x30, 0x57, 0x9d, 0xd2, 0x3e, 0xea, 0xc2, 0xda, 0x29, 0x4e,
	0x9f, 0xfb, 0x09, 0x11, 0x87, 0x26, 0x97, 0x86, 0x63, 0xfb, 0xa3, 0x05, 0xad, 0xc3, 0xd0, 0x27,
	0x52, 0xf6, 0x2e, 0x40, 0x1c, 0x45, 0xe4, 0x88, 0x9b, 0x6d, 0x31, 0x76, 0x65, 0x07, 0x0d, 0x00,
	0xa9, 0xf2, 0x3c, 0x6a, 0x75, 0xc2, 0x34, 0x69, 0x1d, 0x6c, 0xb1, 0x44, 0x90, 0x7e, 0xa0, 0x02,
	0x1d, 0x03, 0xb1, 0xc1, 0x7b, 0x0f, 0xa0, 0xad, 0x72, 0xd1, 0x23, 0x8d, 0x19, 0x2e, 0x97, 0xcf,
	0x17, 0xf6, 0x67, 0x70, 0x5d, 0xa5, 0x92, 0x1a, 0x1b, 0x89, 0x0d, 0x9e, 0xfe, 0x83, 0x05, 0xdb,
	0x9a, 0x6e, 0x38, 0x99, 0x47, 0x61, 0x82, 0xd1, 0x8f, 0xa0, 0x1d, 0x2b, 0xfb, 0xcc, 0xed, 0x46,
	0x63, 0x34, 0x32, 0xea, 0xe5, 0xe4, 0x6c, 0x3c, 0xc6, 0x49, 0x22, 0x0e, 0x42, 0x2e, 0xe9, 0x97,
	0x19, 0x57, 0x4e, 0x18, 0x29, 0x97, 0xf6, 0x27, 0xb0, 0xf5, 0xa5, 0x1b, 0x4f, 0x30, 0x29, 0x04,
	0xca, 0x25, 0x52, 0xe3, 0xdf, 0x16, 0x34, 0x38, 0x6f, 0xf9, 0x7a, 0xcd, 0x20, 0x6a, 0x7a, 0xf0,
	0x06, 0x38, 0x9c, 0x90, 0x29, 0x53, 0xa2, 0xee, 0x88, 0x15, 0xda, 0x87, 0xc6, 0xd4, 0x4d, 0xa6,
	0x38, 0xe9, 0xae, 0xb0, 0xeb, 0x6b, 0x87, 0x19, 0xca, 0xa1, 0xfb, 0x9f, 0xb3, 0x2f, 0xcf, 0x42,
	0x12, 0xa7, 0x8e, 0x20, 0xeb, 0x7d, 0x02, 0x2d, 0x65, 0x9b, 0x4a, 0x3f, 0xc5, 0xa9, 0x94, 0x7e,
	0x8a, 0x53, 0x7a, 0x02, 0xe7, 0x6e, 0x70, 0xc6, 0xc5, 0xb7, 0x1d, 0xbe, 0xf8, 0x49, 0xed, 0x63,
	0xcb, 0x3e, 0x84, 0x0d, 0x0e, 0xfc, 0xda, 0x27, 0x53, 0xea, 0x4b, 0x74, 0x1f, 0x1a, 0x84, 0xed,
	0x08, 0x37, 0xb7, 0x14, 0xe9, 0x8e, 0xf8, 0x94, 0x25, 0x40, 0x2d, 0x4f, 0x00, 0xfb, 0x4f, 0x16,
	0x74, 0x74, 0xac, 0xec, 0x00, 0x3f, 0x85, 0x0d, 0xa2, 0x7d, 0x11, 0xd8, 0xd7, 0x15, 0xec, 0x8c,
	0xa9, 0x40, 0xba, 0xd4, 0x31, 0x8e, 0x8a, 0xaa, 0x64, 0x41, 0xf1, 0x1e, 0xac, 0x71, 0x7c, 0x1e,
	0x8e, 0x15, 0x3a, 0x48, 0x1a, 0xfb, 0xaf, 0x16, 0xec, 0x9a, 0x91, 0x32, 0xe3, 0x4e, 0xa0, 0x43,
	0x8c, 0x14, 0xc2, 0xc8, 0x5b, 0x06, 0x01, 0x19, 0x48, 0x05, 0x6b, 0xb5, 0xd1, 0xf6, 0x18, 0x10,
	0xc7, 0x7a, 0x92, 0x52, 0xea, 0xc1, 0x98, 0xde, 0x93, 0xc6, 0x10, 0x7d, 0x28, 0xf3, 0xae, 0x32,
	0xf9, 0xf5, 0x54, 0x54, 0xf2, 0xfd, 0x5b, 0x68, 0x9e, 0xf8, 0x93, 0xd0, 0x25, 0x67, 0x31, 0xcb,
	0x5f, 0x76, 0xad, 0x0a, 0x70, 0xbe, 0xa0, 0xd1, 0x3b, 0xc3, 0x64, 0x1a, 0x79, 0x22, 0x08, 0xc4,
	0x0a, 0xdd, 0x86, 0x66, 0x22, 0x59, 0x19, 0x64, 0xdb, 0xc9, 0x37, 0xa8, 0x5d, 0x7e, 0xf2, 0xca,
	0x0d, 0x7c, 0x8f, 0xdd, 0x71, 0x57, 0x1d, 0xb9, 0xb4, 0x7f, 0x01, 0xcd, 0xac, 0x42, 0xa3, 0x0d,
	0xa8, 0xf9, 0x9e, 0x90, 0x57, 0xf3, 0x19, 0xa8, 0x1b, 0x4c, 0xa2, 0xd8, 0x27, 0xd3, 0x99, 0x90,
	0x97, 0x6f, 0x50, 0x55, 0xe6, 0x8c, 0x55, 0xc8, 0x13, 0x2b, 0xfb, 0x2b, 0xd8, 0xca, 0x8b, 0xbe,
	0x3c, 0xae, 0xef, 0x33, 0x62, 0x99, 0x20, 0xe5, 0xe6, 0x40, 0x7c, 0x5d, 0x70, 0x02, 0xdf, 0x59,
	0xb0, 0xa1, 0xd7, 0x50, 0xf4, 0x01, 0xac, 0x9c, 0xd2, 0x7e, 0x83, 0x87, 0xd4, 0x1d, 0x06, 0xa9,
	0x93, 0xf4, 0x69, 0x29, 0xe3, 0x69, 0xcb, 0x48, 0x8d, 0x37, 0xc2, 0x6d, 0x68, 0x92, 0x69, 0x8c,
	0x93, 0x69, 0x14, 0x78, 0xcc, 0x96, 0x55, 0x27, 0xdf, 0xc8, 0xeb, 0xe8, 0x8a, 0x52, 0x47, 0x7b,
	0x23, 0x68, 0x66, 0xd0, 0x86, 0xd4, 0x7f, 0xa0, 0xa6, 0x7e, 0xd9, 0x5a, 0xe5, 0x2a, 0xf8, 0x8b,
	0x05, 0x6d, 0x1e, 0x59, 0xf4, 0xe8, 0xb1, 0x87, 0x1e, 0x2a, 0x55, 0x4e, 0xe6, 0x89, 0x6e, 0x94,
	0x28, 0x7d, 0xf9, 0x95, 0x51, 0xab, 0xbe, 0x32, 0xfa, 0x00, 0x59, 0x18, 0xf0, 0x5e, 0x45, 0x6a,
	0x93, 0x45, 0x9a, 0xa3, 0x50, 0xd8, 0x3f, 0x87, 0x4d, 0x55, 0x1b, 0x96, 0x15, 0xef, 0x16, 0x93,
	0x77, 0x4b, 0x91, 0xc4, 0xe9, 0xf2, 0xd4, 0xfd, 0xbb, 0x05, 0xdd, 0x22, 0x42, 0x16, 0x05, 0x03,
	0xd8, 0x24, 0x85, 0x6f, 0xc2, 0xce, 0x1b, 0x25, 0x48, 0xc6, 0x58, 0x22, 0x5f, 0xea, 0x5e, 0x1a,
	0xc2, 0xfa, 0x13, 0x37, 0xf1, 0xc7, 0x99, 0x1e, 0x0a, 0x88, 0x55, 0x09, 0x52, 0xd3, 0x41, 0x7e,
	0x03, 0x8d, 0xe1, 0xd4, 0x0d, 0x27, 0xac, 0x82, 0xb8, 0x2c, 0xff, 0xc5, 0x89, 0x8b, 0x15, 0x8d,
	0x94, 0x64, 0x1c, 0xcd, 0x25, 0x27, 0x5f, 0xd0, 0x88, 0x23, 0xe9, 0x5c, 0xea, 0xc4, 0x7e, 0xd3,
	0x3d, 0x1a, 0x46, 0xa2, 0xe1, 0x60, 0xbf, 0xa9, 0xe4, 0x71, 0x14, 0x12, 0x1c, 0x92, 0xee, 0x2a,
	0xcb, 0x27, 0xb9, 0xb4, 0x3f, 0x04, 0xe0, 0x92, 0x99, 0x03, 0xbe, 0x07, 0x6b, 0x63, 0xb6, 0x92,
	0xa7, 0xc1, 0xcf, 0x9d, 0x53, 0x38, 0xf2, 0x9b, 0x9d, 0x02, 0xca, 0x99, 0x32, 0xc3, 0xf7, 0x01,
	0x38, 0x41, 0x90, 0xbb, 0xfe, 0x9a, 0xc2, 0xcf, 0x88, 0x15, 0x92, 0xa5, 0xdc, 0xfd, 0x18, 0xae,
	0x3a, 0x51, 0x44, 0x58, 0x8a, 0xe6, 0xad, 0xa2, 0xa5, 0xb5, 0x8a, 0x5a, 0xce, 0xd5, 0x0a, 0x39,
	0x67, 0x7f, 0x0d, 0x2b, 0x8c, 0xfb, 0x1d, 0xb8, 0x1a, 0x0b, 0x24, 0xa1, 0xec, 0xba, 0xb8, 0x4e,
	0xf9, 0xa6, 0x93, 0x7d, 0x36, 0x26, 0xb6, 0xb1, 0x47, 0xb7, 0xdf, 0xa5, 0xea, 0x05, 0xdc, 0x99,
	0x77, 0xd5, 0x26, 0xa9, 0x75, 0xd0, 0xcc, 0x2e, 0x6b, 0xd9, 0x5c, 0x7d, 0x4b, 0xfb, 0xd0, 0x40,
	0x77, 0x22, 0xd3, 0x2a, 0x50, 0x8b, 0xcd, 0x7a, 0xc6, 0xc7, 0x08, 0xb3, 0xcf, 0x4b, 0xb9, 0x6f,
	0x0c, 0x88, 0x22, 0xd1, 0xe2, 0x94, 0xe5, 0x68, 0x52, 0x48, 0x64, 0xeb, 0xa2, 0x44, 0x46, 0x77,
	0x94, 0x5e, 0x41, 0x33, 0x8c, 0xb7, 0x0d, 0x2e, 0x74, 0xca, 0x42, 0x98, 0xca, 0x23, 0x40, 0x71,
	0xe9, 0x8b, 0x10, 0xb8, 0x93, 0xc1, 0xe8, 0x9f, 0x1d, 0x03, 0x8b, 0xfd, 0x2f, 0x0b, 0x76, 0xcd,
	0x32, 0xd4, 0x22, 0x1e, 0x1b, 0x29, 0xb4, 0x22, 0x5e, 0x01, 0x52, 0xc1, 0xba, 0x94, 0xcf, 0x3b,
	0xb0, 0x3d, 0x8c, 0xd3, 0x39, 0x89, 0x4e, 0x70, 0x7c, 0xee, 0x8f, 0x65, 0x0f, 0x6a, 0x4f, 0xa1,
	0xa7, 0xed, 0x0f, 0x63, 0xec, 0x92, 0xac, 0x43, 0xed, 0xf1, 0x40, 0x78, 0x99, 0xb7, 0x00, 0xd9,
	0xba, 0xdc, 0xa9, 0xea, 0xd5, 0xb4, 0x5e, 0xa8, 0xa6, 0xf6, 0xfb, 0xd0, 0x60, 0xb7, 0x5c, 0x7c,
	0xd9, 0x52, 0x69, 0xff, 0xd3, 0x02, 0x38, 0x8e, 0xfd, 0x73, 0xfe, 0x48, 0x7a, 0x9b, 0x0a, 0x3b,
	0x8f, 0xfd, 0xf3, 0x53, 0xf1, 0x50, 0x6a, 0x3b, 0x72, 0x89, 0xf6, 0xa1, 0x3d, 0xe6, 0xc6, 0x32,
	0x45, 0x98, 0x8e, 0xf2, 0x7a, 0xe1, 0x5b, 0x8e, 0x46, 0x80, 0x6c, 0x68, 0x27, 0xfe, 0x64, 0x90,
	0x19, 0xc5, 0xaf, 0x33, 0x6d, 0xcf, 0x9e, 0x15, 0x3c, 0x38, 0xf0, 0x3c, 0xe5, 0x49, 0xf7, 0x76,
	0x1e, 0xbc, 0xc7, 0xeb, 0x6c, 0x5d, 0xb9, 0xb6, 0x72, 0x07, 0xb0, 0xc2, 0x6b, 0xff, 0xc3, 0x02,
	0xa4, 0xec, 0xc9, 0x40, 0xbb, 0xd4, 0xa3, 0x13, 0xbd, 0x93, 0xbb, 0xa6, 0x42, 0x46, 0xe6, 0x2b,
	0x25, 0xc8, 0x56, 0x2a, 0x83, 0x6c, 0x55, 0x0f, 0xb2, 0x8f, 0xa0, 0xcd, 0x5e, 0x8b, 0xca, 0x0b,
	0xcd, 0xd0, 0xe1, 0x95, 0x9f, 0x38, 0xdf, 0x00, 0xe2, 0xaf, 0x4c, 0x2d, 0x77, 0xaa, 0x6e, 0xd6,
	0x65, 0xc2, 0xff, 0x6f, 0x16, 0xd8, 0xda, 0x29, 0xe5, 0x26, 0xd3, 0xa3, 0x96, 0x0a, 0x5f, 0x36,
	0xc4, 0x3a, 0xd0, 0xf0, 0xfc, 0x09, 0x4e, 0x88, 0x88, 0x30, 0xb1, 0x52, 0x43, 0xaf, 0xae, 0x87,
	0x5e, 0xf9, 0x01, 0x8e, 0x61, 0x2b, 0xbf, 0xd8, 0xa4, 0xcd, 0x5a, 0x97, 0x6b, 0x19, 0xba, 0xdc,
	0xb7, 0xb6, 0xfc, 0x3b, 0x0b, 0x6e, 0x53, 0x39, 0x7e, 0x38, 0xe1, 0x3e, 0xfe, 0x32, 0x62, 0xaf,
	0xf1, 0x4c, 0xe4, 0x33, 0xcd, 0xcd, 0xad, 0x83, 0xf7, 0xb2, 0x74, 0xa8, 0x62, 0xe9, 0xf3, 0x5d,
	0xf1, 0x58, 0x5c, 0xfe, 0x54, 0xe8, 0x03, 0x53, 0x81, 0xba, 0xe8, 0x81, 0xd9, 0x54, 0xbb, 0xca,
	0x9f, 0xc2, 0xc6, 0x2b, 0x1c, 0x27, 0xca, 0x40, 0xb1, 0x0b, 0x6b, 0xe7, 0x7c, 0x87, 0x21, 0xac,
	0x3a, 0x72, 0x59, 0x0e, 0xb8, 0x83, 0xff, 0x6c, 0x42, 0xe3, 0x65, 0x44, 0xdc, 0x38, 0x45, 0x3f,
	0x04, 0x38, 0x0c, 0x7d, 0xe2, 0xbb, 0x81, 0xff, 0x5b, 0x8c, 0x36, 0x99, 0xf1, 0xca, 0x5c, 0xa4,
	0x87, 0xd8, 0x8e, 0xd6, 0x5d, 0xd9, 0x57, 0xd0, 0xfb, 0xb0, 0xc6, 0xa2, 0x22, 0x99, 0x22, 0x9e,
	0x42, 0xf9, 0x10, 0xb4, 0x82, 0xa3, 0x0f, 0xcd, 0x81, 0xe7, 0x89, 0x87, 0xbc, 0xda, 0xc9, 0x56,
	0xd0, 0x7f, 0x00, 0x6d, 0x3e, 0xb5, 0xba, 0x3c, 0xcb, 0x4b, 0x68, 0xd1, 0x04, 0xe2, 0x34, 0x09,
	0xea, 0x96, 0x1e, 0x66, 0x52, 0xc3, 0xfb, 0x8b, 0x9e, 0x8e, 0x39, 0xde, 0x21, 0x5c, 0x1b, 0x61,
	0xa2, 0xbe, 0x0a, 0x91, 0x3a, 0x33, 0x50, 0x1f, 0x8a, 0x3d, 0xd3, 0x6b, 0x54, 0x81, 0xfa, 0x0a,
	0x7a, 0x23, 0x4c, 0x06, 0x41, 0xc0, 0x29, 0x5e, 0x60, 0xe2, 0x7a, 0x2e, 0x71, 0x05, 0x6a, 0x47,
	0x61, 0x56, 0x06, 0x24, 0xbd, 0x3b, 0xe6, 0x9e, 0x39, 0x87, 0xfd, 0x14, 0xd6, 0x47, 0x98, 0x0c,
	0xf3, 0x6e, 0xae, 0x74, 0x18, 0x3b, 0xc5, 0xde, 0x2f, 0x67, 0x1e, 0x42, 0x93, 0xed, 0xb0, 0xb7,
	0x6a, 0x89, 0xf1, 0xfe, 0xa2, 0xca, 0x9c, 0x83, 0xfc, 0x0c, 0xd0, 0x08, 0x13, 0xfd, 0xf9, 0x62,
	0x40, 0xbb, 0xa1, 0xf7, 0x4f, 0x39, 0xff, 0x63, 0x58, 0xd7, 0x26, 0xc2, 0xe8, 0x26, 0xa3, 0x34,
	0x8d, 0xcc, 0x2b, 0x4e, 0xfd, 0x15, 0x74, 0xab, 0x86, 0xda, 0xe8, 0x41, 0x19, 0xac, 0x3c, 0xf3,
	0xae, 0xc0, 0xfd, 0x02, 0x50, 0x79, 0x56, 0x8d, 0x76, 0xcb, 0x88, 0xea, 0xa0, 0xb6, 0x02, 0xeb,
	0x57, 0xe5, 0xf1, 0xae, 0x3a, 0x9e, 0x46, 0x8f, 0xb8, 0x7b, 0x2e, 0x9e, 0x60, 0x57, 0x46, 0xfe,
	0xb6, 0x69, 0x06, 0x8d, 0xf6, 0x8c, 0xb8, 0xca, 0x78, 0xba, 0x02, 0xef, 0x18, 0x6e, 0x18, 0xc7,
	0xd1, 0xe8, 0x9e, 0x11, 0x70, 0x39, 0x0d, 0xd9, 0x09, 0xed, 0x55, 0x5a, 0xbe, 0x18, 0xef, 0x09,
	0x6c, 0x0f, 0x03, 0xec, 0xc6, 0x45, 0x05, 0xb7, 0xb5, 0xa4, 0x5f, 0x8c, 0xf1, 0x18, 0xd6, 0x5e,
	0xfb, 0x24, 0x64, 0x77, 0x74, 0xe5, 0x5d, 0x71, 0xb3, 0x3c, 0xde, 0xc9, 0x11, 0x3e, 0x86, 0x66,
	0x36, 0xc4, 0x46, 0x32, 0xc6, 0xf5, 0xa1, 0x76, 0x85, 0xec, 0xcf, 0x60, 0x5d, 0xab, 0xc7, 0xe5,
	0x94, 0xe1, 0x82, 0x8d, 0x4d, 0x2b, 0x3d, 0xa0, 0xeb, 0x86, 0xb6, 0x15, 0xdd, 0x2d, 0xf3, 0x68,
	0x0d, 0x6d, 0xaf, 0x53, 0x28, 0xe8, 0xb9, 0x42, 0xdf, 0xc0, 0xad, 0x05, 0x0d, 0x02, 0x7a, 0x58,
	0x46, 0x36, 0xb6, 0x10, 0x42, 0x42, 0xa9, 0xb2, 0xdb, 0x57, 0xd0, 0xf3, 0x82, 0xce, 0xbc, 0x51,
	0x34, 0xe9, 0xac, 0xb5, 0x90, 0x95, 0x01, 0xa0, 0xa3, 0x8d, 0x30, 0xa1, 0x68, 0x7c, 0x72, 0xa1,
	0x76, 0x61, 0x0b, 0x6c, 0xfe, 0xa2, 0xd0, 0xba, 0x8e, 0x30, 0x51, 0xfa, 0x6d, 0x03, 0xd4, 0x4e,
	0xb1, 0x5d, 0xcc, 0xb1, 0x06, 0xd0, 0xd1, 0xb0, 0x78, 0x48, 0x57, 0xe0, 0x98, 0x4d, 0xfa, 0x1c,
	0x6e, 0x68, 0x10, 0x34, 0xd8, 0xf8, 0xff, 0x7b, 0xc6, 0xa0, 0xde, 0xc9, 0x71, 0x8b, 0xb7, 0xf2,
	0x31, 0x74, 0x4b, 0x48, 0x83, 0x20, 0x60, 0x60, 0xa5, 0x40, 0xbb, 0x77, 0x61, 0xc3, 0xc3, 0xdc,
	0xbd, 0x75, 0x82, 0xc9, 0x73, 0x3c, 0x71, 0xc7, 0xa9, 0x68, 0x3c, 0x12, 0xc4, 0x67, 0x57, 0x7a,
	0x1f, 0xd2, 0xeb, 0xf4, 0xf9, 0xff, 0xa5, 0x7d, 0xf9, 0x7f, 0x69, 0x9f, 0xfd, 0x5f, 0x6a, 0x5f,
	0x79, 0xd3, 0x60, 0x3b, 0x1f, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xd1, 0xf4, 0x21, 0x61,
	0x1d, 0x00, 0x00,
}
