// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Empty
	RoleList
	TargetName
	Target
	TargetWithRole
	TargetWithRoleList
	TargetByNameAction
	Signature
	PublicKey
	DelegationRole
	TargetSigned
	TargetSignedList
	BasicResponse
	Change
	ChangeList
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// RoleList message holds a list of TUF role names
type RoleList struct {
	Roles []string `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RoleList) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type TargetName struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TargetName) Reset()                    { *m = TargetName{} }
func (m *TargetName) String() string            { return proto.CompactTextString(m) }
func (*TargetName) ProtoMessage()               {}
func (*TargetName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TargetName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Target message describes a TUF target
type Target struct {
	Gun    string            `protobuf:"bytes,1,opt,name=gun" json:"gun,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Length int64             `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Hashes map[string][]byte `protobuf:"bytes,4,rep,name=hashes" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Custom []byte            `protobuf:"bytes,5,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Target) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Target) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Target) GetHashes() map[string][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *Target) GetCustom() []byte {
	if m != nil {
		return m.Custom
	}
	return nil
}

// TargetWithRole represents a Target that exists in a particular role
type TargetWithRole struct {
	Target *Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Role   string  `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *TargetWithRole) Reset()                    { *m = TargetWithRole{} }
func (m *TargetWithRole) String() string            { return proto.CompactTextString(m) }
func (*TargetWithRole) ProtoMessage()               {}
func (*TargetWithRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TargetWithRole) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TargetWithRole) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type TargetWithRoleList struct {
	Targets []*TargetWithRole `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
}

func (m *TargetWithRoleList) Reset()                    { *m = TargetWithRoleList{} }
func (m *TargetWithRoleList) String() string            { return proto.CompactTextString(m) }
func (*TargetWithRoleList) ProtoMessage()               {}
func (*TargetWithRoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TargetWithRoleList) GetTargets() []*TargetWithRole {
	if m != nil {
		return m.Targets
	}
	return nil
}

type TargetByNameAction struct {
	Name  string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Roles *RoleList `protobuf:"bytes,2,opt,name=roles" json:"roles,omitempty"`
}

func (m *TargetByNameAction) Reset()                    { *m = TargetByNameAction{} }
func (m *TargetByNameAction) String() string            { return proto.CompactTextString(m) }
func (*TargetByNameAction) ProtoMessage()               {}
func (*TargetByNameAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TargetByNameAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TargetByNameAction) GetRoles() *RoleList {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Signature struct {
	KeyID     string `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Method    string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	IsValid   bool   `protobuf:"varint,4,opt,name=isValid" json:"isValid,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Signature) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Signature) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type PublicKey struct {
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DelegationRole struct {
	Keys      map[string]*PublicKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name      string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Threshold int32                 `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
	Paths     []string              `protobuf:"bytes,4,rep,name=paths" json:"paths,omitempty"`
}

func (m *DelegationRole) Reset()                    { *m = DelegationRole{} }
func (m *DelegationRole) String() string            { return proto.CompactTextString(m) }
func (*DelegationRole) ProtoMessage()               {}
func (*DelegationRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DelegationRole) GetKeys() map[string]*PublicKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *DelegationRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DelegationRole) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DelegationRole) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TargetSigned struct {
	Role       *DelegationRole `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Target     *Target         `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Signatures []*Signature    `protobuf:"bytes,3,rep,name=signatures" json:"signatures,omitempty"`
}

func (m *TargetSigned) Reset()                    { *m = TargetSigned{} }
func (m *TargetSigned) String() string            { return proto.CompactTextString(m) }
func (*TargetSigned) ProtoMessage()               {}
func (*TargetSigned) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TargetSigned) GetRole() *DelegationRole {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *TargetSigned) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TargetSigned) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type TargetSignedList struct {
	Targets []*TargetSigned `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
}

func (m *TargetSignedList) Reset()                    { *m = TargetSignedList{} }
func (m *TargetSignedList) String() string            { return proto.CompactTextString(m) }
func (*TargetSignedList) ProtoMessage()               {}
func (*TargetSignedList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TargetSignedList) GetTargets() []*TargetSigned {
	if m != nil {
		return m.Targets
	}
	return nil
}

// BasicResponse describes a response with a true/false success indicator,
// and if false, an error type and message. See the errors.go file in this
// package for the possible errors and a translation function between the
// BasicResponse object and a concrete error type.
type BasicResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *BasicResponse) Reset()                    { *m = BasicResponse{} }
func (m *BasicResponse) String() string            { return proto.CompactTextString(m) }
func (*BasicResponse) ProtoMessage()               {}
func (*BasicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BasicResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BasicResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Change describes a repository's change
type Change struct {
	Action  string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Path    string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Change) Reset()                    { *m = Change{} }
func (m *Change) String() string            { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()               {}
func (*Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Change) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Change) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Change) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Change) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Change) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// ChangeList describes a list of a repository's changes
type ChangeList struct {
	Changes []*Change `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
}

func (m *ChangeList) Reset()                    { *m = ChangeList{} }
func (m *ChangeList) String() string            { return proto.CompactTextString(m) }
func (*ChangeList) ProtoMessage()               {}
func (*ChangeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ChangeList) GetChanges() []*Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*RoleList)(nil), "api.RoleList")
	proto.RegisterType((*TargetName)(nil), "api.TargetName")
	proto.RegisterType((*Target)(nil), "api.Target")
	proto.RegisterType((*TargetWithRole)(nil), "api.TargetWithRole")
	proto.RegisterType((*TargetWithRoleList)(nil), "api.TargetWithRoleList")
	proto.RegisterType((*TargetByNameAction)(nil), "api.TargetByNameAction")
	proto.RegisterType((*Signature)(nil), "api.Signature")
	proto.RegisterType((*PublicKey)(nil), "api.PublicKey")
	proto.RegisterType((*DelegationRole)(nil), "api.DelegationRole")
	proto.RegisterType((*TargetSigned)(nil), "api.TargetSigned")
	proto.RegisterType((*TargetSignedList)(nil), "api.TargetSignedList")
	proto.RegisterType((*BasicResponse)(nil), "api.BasicResponse")
	proto.RegisterType((*Change)(nil), "api.Change")
	proto.RegisterType((*ChangeList)(nil), "api.ChangeList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notary service

type NotaryClient interface {
	// AddTarget adds a target to the TUF repository and re-signs.
	AddTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error)
	// RemoveTarget deletes a target from the TUF repository and re-signs. It only
	// uses the `name` field from the Target object, ignoring all other fields
	RemoveTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error)
	// ListTargets list the targets for the specified roles in the TUF repository
	ListTargets(ctx context.Context, in *RoleList, opts ...grpc.CallOption) (*TargetWithRoleList, error)
	// GetTargetByName returns a target by the given name.
	GetTargetByName(ctx context.Context, in *TargetByNameAction, opts ...grpc.CallOption) (*TargetWithRole, error)
	// GetAllTargetMetadataByName
	GetAllTargetMetadataByName(ctx context.Context, in *TargetName, opts ...grpc.CallOption) (*TargetSignedList, error)
	// GetChangelist returns the list of the repository's unpublished changes
	GetChangelist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeList, error)
}

type notaryClient struct {
	cc *grpc.ClientConn
}

func NewNotaryClient(cc *grpc.ClientConn) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) AddTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/AddTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) ListTargets(ctx context.Context, in *RoleList, opts ...grpc.CallOption) (*TargetWithRoleList, error) {
	out := new(TargetWithRoleList)
	err := grpc.Invoke(ctx, "/api.Notary/ListTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetTargetByName(ctx context.Context, in *TargetByNameAction, opts ...grpc.CallOption) (*TargetWithRole, error) {
	out := new(TargetWithRole)
	err := grpc.Invoke(ctx, "/api.Notary/GetTargetByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetAllTargetMetadataByName(ctx context.Context, in *TargetName, opts ...grpc.CallOption) (*TargetSignedList, error) {
	out := new(TargetSignedList)
	err := grpc.Invoke(ctx, "/api.Notary/GetAllTargetMetadataByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetChangelist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeList, error) {
	out := new(ChangeList)
	err := grpc.Invoke(ctx, "/api.Notary/GetChangelist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notary service

type NotaryServer interface {
	// AddTarget adds a target to the TUF repository and re-signs.
	AddTarget(context.Context, *Target) (*BasicResponse, error)
	// RemoveTarget deletes a target from the TUF repository and re-signs. It only
	// uses the `name` field from the Target object, ignoring all other fields
	RemoveTarget(context.Context, *Target) (*BasicResponse, error)
	// ListTargets list the targets for the specified roles in the TUF repository
	ListTargets(context.Context, *RoleList) (*TargetWithRoleList, error)
	// GetTargetByName returns a target by the given name.
	GetTargetByName(context.Context, *TargetByNameAction) (*TargetWithRole, error)
	// GetAllTargetMetadataByName
	GetAllTargetMetadataByName(context.Context, *TargetName) (*TargetSignedList, error)
	// GetChangelist returns the list of the repository's unpublished changes
	GetChangelist(context.Context, *Empty) (*ChangeList, error)
}

func RegisterNotaryServer(s *grpc.Server, srv NotaryServer) {
	s.RegisterService(&_Notary_serviceDesc, srv)
}

func _Notary_AddTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).AddTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/AddTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).AddTarget(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveTarget(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).ListTargets(ctx, req.(*RoleList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetTargetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetByNameAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetTargetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetTargetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetTargetByName(ctx, req.(*TargetByNameAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetAllTargetMetadataByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetAllTargetMetadataByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetAllTargetMetadataByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetAllTargetMetadataByName(ctx, req.(*TargetName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/GetChangelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetChangelist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTarget",
			Handler:    _Notary_AddTarget_Handler,
		},
		{
			MethodName: "RemoveTarget",
			Handler:    _Notary_RemoveTarget_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _Notary_ListTargets_Handler,
		},
		{
			MethodName: "GetTargetByName",
			Handler:    _Notary_GetTargetByName_Handler,
		},
		{
			MethodName: "GetAllTargetMetadataByName",
			Handler:    _Notary_GetAllTargetMetadataByName_Handler,
		},
		{
			MethodName: "GetChangelist",
			Handler:    _Notary_GetChangelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x5b, 0x6f, 0xdb, 0x36,
	0x14, 0x8e, 0x7c, 0x8d, 0x8e, 0x9c, 0xcb, 0x98, 0x6d, 0x11, 0x84, 0x0c, 0x10, 0x98, 0x0d, 0x33,
	0x30, 0xcc, 0x43, 0x9c, 0x87, 0x6d, 0x7d, 0x29, 0x9c, 0x4b, 0xdd, 0x20, 0x4d, 0x50, 0xb0, 0x45,
	0xfb, 0xcc, 0xc8, 0x84, 0x25, 0x58, 0x96, 0x54, 0x93, 0x0e, 0xaa, 0xff, 0xd0, 0x5f, 0xd6, 0xe7,
	0xbe, 0xf7, 0xaf, 0x14, 0xbc, 0xd9, 0x74, 0xeb, 0x02, 0x7d, 0xe3, 0x47, 0x9e, 0x73, 0x78, 0xce,
	0xf7, 0x7d, 0xa2, 0xc0, 0xa7, 0x55, 0x36, 0xa8, 0x16, 0xa5, 0x28, 0x51, 0x93, 0x56, 0x19, 0xee,
	0x42, 0xfb, 0x7a, 0x5e, 0x89, 0x1a, 0xc7, 0xb0, 0x4b, 0xca, 0x9c, 0xbd, 0xc8, 0xb8, 0x40, 0x3f,
	0x43, 0x7b, 0x51, 0xe6, 0x8c, 0x87, 0x5e, 0xdc, 0xec, 0xfb, 0x44, 0x03, 0x1c, 0x03, 0xbc, 0xa6,
	0x8b, 0x29, 0x13, 0xf7, 0x74, 0xce, 0x10, 0x82, 0x56, 0x41, 0xe7, 0x2c, 0xf4, 0x62, 0xaf, 0xef,
	0x13, 0xb5, 0xc6, 0x1f, 0x3d, 0xe8, 0xe8, 0x10, 0x74, 0x08, 0xcd, 0xe9, 0xb2, 0x30, 0xa7, 0x72,
	0xb9, 0x4a, 0x68, 0xac, 0x13, 0xd0, 0xaf, 0xd0, 0xc9, 0x59, 0x31, 0x15, 0x69, 0xd8, 0x8c, 0xbd,
	0x7e, 0x93, 0x18, 0x84, 0xfe, 0x81, 0x4e, 0x4a, 0x79, 0xca, 0x78, 0xd8, 0x8a, 0x9b, 0xfd, 0x60,
	0x78, 0x3c, 0x90, 0x6d, 0xeb, 0xd2, 0x83, 0xe7, 0xea, 0xe4, 0xba, 0x10, 0x8b, 0x9a, 0x98, 0x30,
	0x59, 0x28, 0x59, 0x72, 0x51, 0xce, 0xc3, 0x76, 0xec, 0xf5, 0x7b, 0xc4, 0xa0, 0xe8, 0x7f, 0x08,
	0x9c, 0x70, 0xd9, 0xd5, 0x8c, 0xd5, 0xb6, 0xab, 0x19, 0xab, 0xe5, 0xa8, 0x8f, 0x34, 0x5f, 0xea,
	0xb6, 0x7a, 0x44, 0x83, 0x27, 0x8d, 0xff, 0x3c, 0x7c, 0x03, 0xfb, 0xfa, 0xc2, 0xb7, 0x99, 0x48,
	0x25, 0x35, 0xe8, 0x14, 0x3a, 0x42, 0xed, 0xa8, 0x02, 0xc1, 0x30, 0x70, 0xba, 0x22, 0xe6, 0x48,
	0x8e, 0x29, 0xe9, 0xb2, 0x63, 0xca, 0x35, 0xbe, 0x04, 0xb4, 0x59, 0x4a, 0xb1, 0xfc, 0x37, 0x74,
	0x75, 0x8e, 0xe6, 0x39, 0x18, 0x1e, 0x39, 0xf5, 0x6c, 0x24, 0xb1, 0x31, 0xf8, 0xce, 0x16, 0xb9,
	0xa8, 0xa5, 0x00, 0xa3, 0x44, 0x64, 0x65, 0xb1, 0x4d, 0x06, 0x74, 0x6a, 0xe5, 0x6b, 0xa8, 0x36,
	0xf7, 0x54, 0x59, 0x7b, 0xad, 0x55, 0xf3, 0x1d, 0xf8, 0xaf, 0xb2, 0x69, 0x41, 0xc5, 0x72, 0xc1,
	0x24, 0x0b, 0x33, 0x56, 0xdf, 0x5c, 0x99, 0x32, 0x1a, 0x48, 0x52, 0xe7, 0x4c, 0xa4, 0xe5, 0xc4,
	0x0c, 0x63, 0x10, 0x3a, 0x01, 0x9f, 0xdb, 0x54, 0x25, 0x5c, 0x8f, 0xac, 0x37, 0x50, 0x08, 0xdd,
	0x8c, 0xbf, 0xa1, 0x79, 0x36, 0x09, 0x5b, 0xb1, 0xd7, 0xdf, 0x25, 0x16, 0xe2, 0x00, 0xfc, 0x97,
	0xcb, 0x87, 0x3c, 0x4b, 0x6e, 0x59, 0x8d, 0x3f, 0x79, 0xb0, 0x7f, 0xc5, 0x72, 0x36, 0xa5, 0x72,
	0x0e, 0xc5, 0xef, 0x19, 0xb4, 0x66, 0xac, 0xb6, 0x6c, 0xfc, 0xa6, 0xda, 0xde, 0x0c, 0x19, 0xdc,
	0xb2, 0xda, 0x28, 0xaf, 0x42, 0xb7, 0x9a, 0xea, 0x04, 0x7c, 0x91, 0x2e, 0x18, 0x4f, 0xcb, 0x7c,
	0xa2, 0xda, 0x6b, 0x93, 0xf5, 0x86, 0x1c, 0xb5, 0xa2, 0x22, 0xd5, 0xce, 0xf2, 0x89, 0x06, 0xd1,
	0x18, 0xfc, 0x55, 0xe9, 0x2d, 0x2e, 0xf9, 0xdd, 0x75, 0x49, 0x30, 0xdc, 0x57, 0xad, 0xad, 0x66,
	0x71, 0x5d, 0xf3, 0xc1, 0x83, 0x9e, 0x96, 0x49, 0xb2, 0xcb, 0x26, 0xe8, 0x4f, 0xe3, 0x07, 0x6d,
	0x99, 0xa3, 0x2d, 0x43, 0x69, 0x93, 0x38, 0xee, 0x6a, 0x7c, 0xdf, 0x5d, 0x03, 0x80, 0x15, 0xd3,
	0x3c, 0x6c, 0x2a, 0xa2, 0x74, 0x37, 0x2b, 0x31, 0x89, 0x13, 0x81, 0x9f, 0xc2, 0xa1, 0xdb, 0x8d,
	0xf2, 0xdd, 0x5f, 0x5f, 0xfb, 0xee, 0x27, 0xe7, 0x26, 0x1d, 0xb7, 0x76, 0xdd, 0x25, 0xec, 0x5d,
	0x50, 0x9e, 0x25, 0x84, 0xf1, 0xaa, 0x2c, 0xb8, 0x92, 0x97, 0x2f, 0x93, 0x84, 0x71, 0xae, 0x46,
	0xda, 0x25, 0x16, 0xca, 0x93, 0x39, 0xe3, 0x9c, 0x4e, 0xad, 0x1c, 0x16, 0xe2, 0xf7, 0xd0, 0xb9,
	0x4c, 0x69, 0x31, 0x55, 0x1f, 0x3c, 0x55, 0xc6, 0x35, 0xec, 0x1a, 0x24, 0x55, 0xe1, 0x49, 0x59,
	0xd9, 0x4c, 0x0d, 0xa4, 0xba, 0xa2, 0xae, 0xb4, 0xc7, 0x7c, 0xa2, 0xd6, 0x72, 0x4f, 0x4a, 0xa6,
	0xbc, 0xe5, 0x13, 0xb5, 0x96, 0x37, 0x27, 0x65, 0x21, 0x58, 0x21, 0xcc, 0xe7, 0x6f, 0x21, 0x3e,
	0x07, 0xd0, 0x37, 0xab, 0xc9, 0xff, 0x80, 0x6e, 0xa2, 0x90, 0x9d, 0x5c, 0x73, 0xac, 0x23, 0x88,
	0x3d, 0x1b, 0x7e, 0x6e, 0x40, 0xe7, 0xbe, 0x14, 0x74, 0x51, 0xa3, 0x01, 0xf8, 0xa3, 0xc9, 0xc4,
	0xbc, 0x69, 0xae, 0x22, 0x11, 0x52, 0x60, 0x83, 0x1b, 0xbc, 0x83, 0xce, 0xa0, 0x47, 0xd8, 0xbc,
	0x7c, 0x64, 0x3f, 0x9e, 0xf2, 0x2f, 0x04, 0xb2, 0x39, 0x1d, 0xc3, 0xd1, 0xe6, 0xd7, 0x1a, 0x1d,
	0x6f, 0x79, 0x13, 0xe4, 0x01, 0xde, 0x41, 0x23, 0x38, 0x18, 0x33, 0xe1, 0xbe, 0x09, 0xc8, 0x8d,
	0x76, 0x9f, 0x89, 0x68, 0xdb, 0xd3, 0x82, 0x77, 0xd0, 0x33, 0x88, 0xc6, 0x4c, 0x8c, 0xf2, 0x5c,
	0x9f, 0xdc, 0x31, 0x41, 0x27, 0x54, 0x50, 0x53, 0xed, 0xc0, 0x49, 0x92, 0x1b, 0xd1, 0x2f, 0xdf,
	0x18, 0xc5, 0xb4, 0x32, 0x80, 0xbd, 0x31, 0x13, 0x9a, 0xc7, 0x5c, 0x32, 0x0d, 0x2a, 0x52, 0xfd,
	0x59, 0xa2, 0x03, 0x87, 0x64, 0x1d, 0xff, 0xd0, 0x51, 0x7f, 0xa0, 0xf3, 0x2f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc2, 0x4b, 0x49, 0x92, 0x8e, 0x06, 0x00, 0x00,
}
