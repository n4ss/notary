syntax = "proto3";

package api;

// Notary Interface
service Notary {
    rpc Initialize(InitMessage) returns (BasicResponse) {}

    rpc Publish(Empty) returns (BasicResponse) {}

    // AddTarget adds a target to the TUF repository and re-signs.
    rpc AddTarget(Target) returns (BasicResponse) {}

    // RemoveTarget deletes a target from the TUF repository and re-signs. It only
    // uses the `name` field from the Target object, ignoring all other fields
    rpc RemoveTarget(Target) returns (BasicResponse) {}

    // ListTargets list the targets for the specified roles in the TUF repository
    rpc ListTargets(RoleList) returns (TargetWithRoleListResponse) {}

    // GetTargetByName returns a target by the given name.
    rpc GetTargetByName(TargetByNameAction) returns (TargetWithRoleResponse) {}

    // GetAllTargetMetadataByName
    rpc GetAllTargetMetadataByName(TargetName) returns (TargetSignedListResponse) {}

    // GetChangelist returns the list of the repository's unpublished changes
    rpc GetChangelist(Empty) returns (ChangeListResponse) {}
}

message Empty {

}

// InitMessage holds a list of root key IDs and a list of roles for which
// the server automatically should manage the keys
message InitMessage {
    repeated string rootKeyIDs = 1;
    RoleList serverManagedRoles = 2;
}

// RoleList message holds a list of TUF role names
message RoleList {
    repeated string roles = 1;
}

message TargetName {
    string name = 1;
}

// Target message describes a TUF target
message Target {
    string gun = 1;
    string name = 2;
    int64 length = 3;
    map<string, bytes> hashes = 4;
    bytes custom = 5;
}

// TargetWithRole represents a Target that exists in a particular role
message TargetWithRole {
    Target target = 1;
    string role = 2;
}

message TargetWithRoleResponse {
    TargetWithRole targetWithRole = 1;
    bool success = 2;
    string message = 3;
}

message TargetWithRoleList {
    repeated TargetWithRole targets = 1;
}

message TargetWithRoleListResponse {
    TargetWithRoleList targetWithRoleList = 1;
    bool success = 2;
    string message = 3;
}

message TargetByNameAction {
    string name = 1;
    RoleList roles = 2;
}

message Signature {
    string keyID = 1;
    string method = 2;
    bytes signature = 3;
    bool isValid = 4;
}

// FIXME: implement
message PublicKey {
}

message DelegationRole {
    map<string, PublicKey> keys = 1;
    string name = 2;
    int32 threshold = 3;
    repeated string paths = 4;
}

message TargetSigned {
    DelegationRole role = 1;
    Target target = 2;
    repeated Signature signatures = 3;
}

message TargetSignedList {
    repeated TargetSigned targets = 1;
}

message TargetSignedListResponse {
    TargetSignedList targetSignedList = 1;
    bool success = 2;
    string message = 3;
}

// BasicResponse describes a response with a true/false success indicator,
// and if false, an error type and message. See the errors.go file in this
// package for the possible errors and a translation function between the
// BasicResponse object and a concrete error type.
message BasicResponse {
    bool success = 1;
    string message = 2;
}

// Change describes a repository's change
message Change {
    string action = 1;
    string scope = 2;
    string type = 3;
    string path = 4;
    bytes content = 5;
}

// ChangeList describes a list of a repository's changes
message ChangeList {
    repeated Change changes = 1;
}

message ChangeListResponse {
    ChangeList changelist = 1;
    bool success = 2;
    string message = 3;
}


